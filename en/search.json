[{"categories":["posts"],"content":"In this article I show how to import a list of appointments, process them and then save them in ICS format.\nBackground Bremer Stadtreinigung offers the waste collection dates for download as ICS file and as CSV file. Unfortunately there are two separate dates for residual waste and organic waste although both are collected on the same day.\nSince I also integrate the dates into my Smarthome to receive notifications about them, I also want them to be in a certain format in the calendar. Details about the integration will follow in a later article.\nThe Python script The finished script can be found here on Github. You need at least Python 3.6 because I use f-strings.\nImports First the required modules are imported. ics and arrow can be installed via pip, the other modules are included in the standard library.\n1 2 3 4 5  import csv from ics import Calendar, Event import arrow from dateutil import tz import datetime    csv : Read and write CSV files ics : Read and write ICS files arrow : extended functions for time objects dateutil.tz : Time zone definitions datetime : Standard functions for time objects  Configuration To make my script also interesting for others, I tried to program different possibilities to create the dates and make them configurable.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  ###### Einstellungen ###### # CSV-Datei von der Eno csv_file = r\"Abfuhrtermine für Auf dem Kamp.csv\" # Soll die Art der Abfuhr in den Titel eingetragen werden? True/False descriptive_title = True # Soll für die HomeAssistant Integration ein Offset eingetragen werden? 0..23 offset_hours = 6 # Soll ein ganztägiger Termin erzeugt werden? True/False all_day = True # Workaround für fehlerhafte All Day Events in ics.py aktivieren? True/False ics_workaround = True # Soll der Termin am Tag vor der Abfuhr erzeugt werden? True/False on_day_before = False # Zu welcher Stunde der Termin erzeugt werden, wenn er nicht ganztägig ist? 0..23 event_hour = 18 # Wie lange soll der Termin sein, wenn er nicht ganztägig ist? 0..23 duration_hour = 1 ######   It can be set whether the appointment is to be created for a whole day or for a specific hour with a configurable duration. You can create the appointment on the day before the collection or on the correct day. You can have the type of collection written in the title or just „Müllabfuhr“. For the integration in Home Assistant you can enter an offset.\nHelper Variables Before we start reading the CSV file, I create some helper variables.\n1 2 3 4 5 6  # Hilfsvariablen offset_string = f\" !!-{offset_hours:02d}:00\" # globale Variablen vorbelegen d = {} c = Calendar()   The offset_string is required for the Home Assistant integration already mentioned. I use an f-string here to insert the content of the variable into the string. The expression offset_hours:02d ensures that one-digit numbers are inserted with leading zero.\nFor the following code I additionally need an empty Dictionary d and an empty Calendar object c.\nImport CSV file The entries in the CSV file look like this:\n1 2 3 4  \"Wochentag\";\"Datum\";\"Abfuhrart\" \"Samstag\";\"04.01.2020\";\"Papier / Gelber Sack\" \"Mittwoch\";\"08.01.2020\";\"Bioabfall\" \"Mittwoch\";\"08.01.2020\";\"Restmüll\"   The CSV file is read in line by line and the entries are pre-processed.\n1 2 3 4 5 6 7 8 9 10 11 12 13  ## Datei öffnen with open(csv_file) as f: # CSV parsen csv_reader = csv.reader(f, delimiter=';', quotechar='\"') for row in csv_reader: if row[0] == 'Wochentag': # Überschrift überspringen continue # Mehrere Abfuhren an einem Tag zusammenfassen if row[1] in d: d[row[1]] =f\"{d[row[1]]} / {row[2]}\" else: d[row[1]] = row[2]   The csv.reader requires the separator and the quote-character to read the file correctly.\nIn the for loop, the heading is skipped first. Next, if-row[1] in d is used to check whether the date is already entered in my dictionary. If this is the case, the two collection types are combined via an f-string and the entry in the dictionary is updated. Otherwise, a new entry is added to the dictionary.\nNow I have a dictionary with the date string as key and the collection type as value.\nCreate Events The next step is to iterate over the dictionary and fill the Calendar object created above with events. d.items() returns Key and Value as a tuple.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  # Zusammengefasste Termine ins ICS Format umandeln for datum, abfuhr in d.items(): # Event anlegen e = Event() # Titel zusammenbauen e.name = f\"Müllabfuhr{(' ' + abfuhr) if descriptive_title else ''}{offset_string if offset_hours \u003e 0 else ''}\" # Startzeitpunkt zusammenbauen _date = datetime.datetime.strptime(datum, \"%d.%m.%Y\").replace(hour=event_hour, tzinfo=tz.gettz(\"Europe/Berlin\")) begin = arrow.get(_date) if ics_workaround: begin = begin.shift(days = 1) e.begin = begin.shift(days = -1 if on_day_before else 0) # Dauer eintragen bzw. ganztägigen Termin erzeugen e.duration = {\"hours\": duration_hour} if all_day: e.make_all_day() # Art der Abfuhr eintragen e.description = abfuhr # Event eintragen c.events.add(e)   For the title of the event I use an f-string again to put several strings together. The expression (' ' + abfuhr) if descriptive_title else '' is a so-called ternary operator. If descriptive_title is set to True, the part before the if is used, otherwise the part after the else will be used.\nThe start time is first read from the key as datetime object with strptime. At the same time, the hour is set to the value defined above with replace and the time zone is set. The datetime object is then converted to arrow object because this is expected by the ICS module.\nThe ICS module has a bug in the used version, which causes the time zone to be ignored for all-day appointments, so that the appointment appears one day too early. As a workaround I therefore move the appointment one day forward with shift so that it is created by ICS on the right day. If it is configured above that the appointment is to be created on the day before the collection, the same command is used to move the appointment back again.\nNow the duration set above is entered into the appointment and then, if necessary, the appointment is converted into an all-day appointment.\nFinally, the collection type is entered in the event description and the event is added to the calendar object.\nWriting the ICS file The last step is to write the Calendar object to a file.\n1 2 3  # Kalenderdatei schreiben with open(\"abfuhr.ics\", \"w\") as f: f.writelines(c)   The resulting file can now be imported into Google, for example.\n","description":"","tags":["Python","Home Assistant","Datatransformation","ICS"],"title":"Processing Events with Python","uri":"/en/posts/programmieren/termine_aufbereiten/"},{"categories":["posts"],"content":"This blog is created with Hugo. In this post I tell you what it’s all about and why I chose this method.\nWhat is Hugo? Hugo claims to be the world’s fastest framework for creating static websites. Hugo is programmed in Go and available for all common operating systems.\nThe articles are written in Markdown and then “compiled” to create the HTML pages. The appearance is determined via Themes.\nThis makes the workflow comparable to that of $\\LaTeX$.\nWhy Hugo? With most content management systems like Wordpress, Drupal, Typo3, etc. it always bothered me that you have to set up a more or less powerful backend. You always need PHP or Python and a database, even if you just want to write a simple blog.\nOn the Self Hosted Podcast I then heard about Hugo.\nHow to get started? Preparations There are various installation methods for Hugo. I downloaded the program as a ZIP file on my Windows computer, on Linux I installed it with Snap. Details can be found on the Hugo website.\nIt’s not mandatory, but using Git makes it a little easier. Therefore, in this article I assume that you have installed Git and have a Github account.\nCreate Site The basic structure of the page is created with the following command on the console:\nhugo new site meinblog Hugo creates a subdirectory with the name meinblog and this content:\narchetypes/ config.toml content/ data/ layouts/ static/ themes/ Next you should choose a theme from the Hugo Theme List. I tried some and finally decided on the MemE theme. The easiest way to install is with Git as described in README. You have to adapt the config.toml to your own needs. Another article on this topic follows.\nCreate Article Articles are created in the content directory as .md files. You can optionally create subfolders as categories. You can create the file manually or use this Hugo command:\nhugo new posts/my-first-post.md The advantage over manual creation is that a frontmatter is also created. This is the configuration area of the article where appearance and behavior can be customized. Another article on this topic follows.\nAt this stage you can start the integrated server and display the (empty) page:\nhugo server -D The option -D at this point is important so that articles marked as draft are also created and displayed.\nNow you can write your articles. If the server is running in the background, the page is automatically regenerated and updated in the browser as soon as you change and save a file.\nPublish the Site When you are finished with your articles, you call hugo without any other options. This creates the finished website with all necessary files in the public subdirectory. This directory can now be hosted on any web server. The workflow for hosting as a github.io page is shown on the Hugo website.\n","description":"","tags":["Hugo","Website"],"title":"Building a Website with Hugo -- Basics","uri":"/en/posts/allgemein/website-mit-hugo/"},{"categories":["posts"],"content":"In this post I show the steps to recreate my environmental sensor with a button. The sensor measures temperature, humidity and air pressure and has a button to trigger any action.\nPreparation What ist ESPHome? According to the self-description on esphome.io, ESPHome is a system for programming ESP8266 or ESP32 microcontrollers using simple configuration files.\nESPHome is written in python and can be installed without Home Assistant using pip install esphome or with docker pull esphome/esphome. I use ESPHome as a home assistant addon, because you also get a web interface for administration.\nNeeded Hardware  ESP8266 microcontroller - e.g. Wemos D1 mini BME280 sensor - with I²C breakout board push button  The housing is lasered from 3mm MDF. A generator for such housings is for example boxes.py.\nConnect Sensor and Button The BME280 is connected via I²C, for this we need the following pins:\n 5V → VIN G → GND D4 → SDA D5 → SCL  You can freely choose the pin for the button, but there are some pins that trigger special functions when booting. I used pin D3 here, the second pin of the button is connected to GND.\nI built the whole thing with plinths on a breadboard in order to be able to easily disassemble the components.\nESPHome Project in Home Assistant Create Project Click on the friendly red button with the plus on the web interface to open the wizard for new projects.\nFirst you give a name.\nThe second step is the selection of the microcontroller. I use the Wemos D1 mini for most projects.\nThe last step is the specification of the WiFi data and the password for the over-the-air update. I use the !secret notation known from Home Assistant. Details on this below.\nThe wizard is now complete and shows us the next steps to program the microcontroller.\nAfter closing the wizard with Submit, the interface selection in the upper corner is pointed out.\nFileorganisation and !secrets In Home Assistant, the project files are in the directory /config/esphome. The example given has created the umweltsensor.yaml.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  esphome:name:umweltsensorplatform:ESP8266board:d1_miniwifi:ssid:\"!secret wifi-ssid\"password:\"!secret wifi-password\"# Enable fallback hotspot (captive portal) in case wifi connection failsap:ssid:\"Umweltsensor Fallback Hotspot\"password:\"lg2kCzecpat7\"captive_portal:# Enable logginglogger:# Enable Home Assistant APIapi:password:\"!secret esphome-password\"ota:password:\"!secret esphome-password\"  I created a secrets.yaml in the same directory. The entries in it can be imported into other .yaml files with!secret. This has the advantage that you can share the project file with others, like me here, without having to pass on your credentials.\nFlashing for the First Time For the first flashing, the microcontroller must be connected via USB to the computer on which ESPHome is running. In my case, the Raspberry Pi where Home Assistant is installed.\nMost of the time, the port of the microcontroller is not displayed immediately when the USB cable is connected. This is related to the Docker system based on the Home Assistant. The workaround is to restart the addon after the microcontroller is connected.\nIf nothing else is connected, /dev/ttyUSB0 is probably displayed, in my case the microcontroller is at /dev/ttyUSB1.\nIn order for the access data to be imported correctly, we still have to edit the generated .yaml file and remove the quotation marks from all entries with !secret. To do this, click on EDIT under the corresponding entry.\nFinally you click UPLOAD to start the flashing.\nIf everything worked correctly, the Arduino code should now be generated from the .yaml file. All the necessary libraries are downloaded in the background, the code compiled and the upload started.\nIn the following logging output you can check whether you have entered the WiFi data correctly.\nFrom now on you can disconnect the microcontroller from the Raspberry Pi and program it via WiFi. To do this, switch the interface above to over-the-air.\nConfigure Sensor and Button For the sensor to be addressed the I²C component is loaded first. The scan: True option ensures that the bus is scanned for devices on every boot.\n1 2 3 4  i2c:sda:4scl:5scan:True  Since the BME280 measures three parameters, the three options temperature, pressure and humidity must be configured accordingly.\nIn filters: for the temperature sensor, a static offset of -7 degrees is set that I have determined in comparison with a second sensor. Likewise, a static offset of +10 percent is set for the air humidity.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  sensor:- platform:bme280temperature:name:\"Thomas Zimmer Temperatur\"oversampling:16xfilters:- offset:-7.0pressure:name:\"Thomas Zimmer Luftdruck\"humidity:name:\"Thomas Zimmer Feuchtigkeit\"filters:- offset:+10.0address:0x76update_interval:60s  The button is configured as a binary sensor. Since the button is connected to GND, the internal pull-up resistor must be activated and the state inverted with inverted: True. The sensor therefore delivers on when the button is pressed.\n1 2 3 4 5 6 7 8 9  binary_sensor:- platform:gpiopin:number:D3mode:INPUT_PULLUPinverted:Truename:\"Thomas Zimmer Button\"filters:- delayed_on:10ms  Connecting to Home Assistant After the complete program has been loaded onto the microcontroller, the sensors must still be integrated in Home Assistant. The setup is done via the integration page in the Home Assistant settings.\nEnter the name of the project as the host address, in this case umweltsensor.local.\nAfter the API password query, the entities for the configured sensors are automatically added to Home Assitant.\n","description":"","tags":["Smarthome","Home Assistant","ESPHome","ESP8266"],"title":"Environment Sensor with ESPHome in Home Assistant","uri":"/en/posts/smarthome/esphome-sensor/"},{"categories":["posts"],"content":"In this post I want to give a brief overview of my Smarthome Setup. In later posts I will go into more detail.\nCentral Hub As my Smarthome Hub I’m running Home Assistant on a Raspberry Pi 3B+. I’m using the native Version with HassOS and the system boots directly from an SSD drive. There is a Conbee stick attached via USB for Zigbee connectivity. Additionally I run another Rasberry Pi 1 with RaspberryMatic to connect my Homematic components.\nMy router is a FritzBox 7590 supported by a FritzRepeater 1750E for connecting WiFi components.\nBoth the Fritzbox and the main Raspberry are buffered by an uninterruptible power supply, because the fuse regularly blows in my flat when I switch on my power strip.\nHardwarelist  Raspberry Pi 3B+ with 2.4A power supply. Intenso Portable SSD with 128GB. Additional power supply with 2.4A and USB Y-cable. Conbee Stick by Dresden Elektronik Uninterruptible power supply APC BX700U-GR Raspberry Pi 1 with HM-MOD-RPI-PCB by ELV  Software When I moved to the SSD drive I decided against setting up for example Rasbian, but used the native installation. That way there is no extra operating system to maintain, but everything can be managed from the Home Assistant interface. Parallel to Home Assistant there are of course a bunch of Addons on the Raspberry:\n ADB Bridge for Android TV control APC USB Daemon for reading the UPS Duck DNS for secure remote access via internet ESPhome for DIY components File Editor to edit the configuration from within the browser Hass.io Google Drive Backup for automated back up MariaDB as replacement for the SQLite history database Mosquitto broker for MQTT Node-RED for automations Samba-Share for access from other computers TasmoAdmin for managing the Tasmota devices Terminal \u0026 SSH for low level access to the system chrony as local NTP server deCONZ for managing the Zigbee components  Of course HACS (Home Assistant Community Store) is also installed for custom components, lovelace plugins, and themes.\nComponents The advantage of Home Assistant is that components from a wide variety of manufacturers and with a wide variety of technologies can be integrated. Accordingly, various sensors and actuators are distributed in the apartment.\nSensors Temperature, humidity and air pressure are recorded in almost every room. On the one hand, the Aqara WSDCGQ11LM multi-sensors via Zigbee are used, on the other hand, I have connected ESP8266 with BME280 sensors via ESPhome.\nWindows and doors are monitored with Aqara and Homematic door / window contacts. An IKEA Tradfri via Zigbee serves as the motion detector.\nIn the basement, a Sonoff POW monitors the power consumption of the washing machine.\nLight The ceiling lighting is not yet smart in my apartment, but it usually stays off anyway because the light comes from decorative lights or indirect lighting.\nThe decorative lights almost all have a classic light source and are plugged into smart intermediate sockets. Most of them are from Teckin or Sonoff and flashed to Tasmota. Another comes from Osram and is connected via Zigbee.\nThere are also some directly connected lamps. A bulb from Eufy connected via their cloud service, an LED strip from Osram via Zigbee and two self-made LED lights connected via ESPhome.\nHeating Our Viessmann heating system is connected via the cloud; Homematic thermostats are mounted on the radiators.\nShutters For the control of the electric roller shutters, I installed Shelly 2.5 flush-mounted actuators and connected them locally via MQTT.\nInteraction Most components can be controlled via Alexa voice input, all components can be controlled via the web interface or companion app on the mobile phone. There are also physical buttons for some actions. In addition to the Aqara WXKG11LM Zigbee button, a self-made button via ESPhome is also used here.\nAutomation The automations are of course what makes the smart home smart. Here is just a brief overview:\nIn the living room, the light is switched on and off depending on the television. The radiators are linked to the windows and also regulate up or down according to the time of day.\nWhen I go to bed, the computer and the NAS are shut down, the roller shutters are closed and the radiator is turned down.\nThere are notifications when the washing machine is ready, when the doorbell rings and when the garbage has to be put out.\n That should suffice as a brief overview of my setup. As written above, soon followed by other articles with details on specific topics.\n","description":"","tags":["Smarthome","Home Assistant","Zigbee","Homematic","Raspberry Pi"],"title":"My Smarthome Setup","uri":"/en/posts/smarthome/mein_setup/"}]
