[{"categories":["posts"],"content":"In this post I show how I try to use Home Assistant to monitor my plants and remind me to water them.\nPlant Sensor The sensor used is a MiFlora-compatible soil sensor. These sensors measure temperature, brightness, soil moisture and soil conductivity. The data is sent via Bluetooth Low Energy (BLE). Originally, I had connected the sensors directly to the Home Assistant Raspberry Pi and the custom integration Passive BLE monitor. On the one hand, I had the problem that the sensors were too far away and only received data irregularly. On the other hand, the sensors were undefined for a while after restarting Home Assistant.\nNow I have switched the integration to ESPhome and it works much better. I am now using an ESP32 with the following configuration:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70  esphome:name:ble_nodeplatform:ESP32board:nodemcu-32swifi:ssid:!secret wifi-ssidpassword:!secret wifi-password# Enable logginglogger:# Enable Home Assistant APIapi:password:!secret esphome-passwordota:password:!secret esphome-passwordesp32_ble_tracker:sensor:- platform:xiaomi_hhccjcy01mac_address:'C4:7C:8D:6B:AD:FF'temperature:name:\"Bauernhortensie Temperature\"moisture:name:\"Bauernhortensie Moisture\"illuminance:name:\"Bauernhortensie Illuminance\"conductivity:name:\"Bauernhortensie Soil Conductivity\"battery_level:name:\"Bauernhortensie Battery Level\"- platform:xiaomi_hhccjcy01mac_address:'C4:7C:8D:6B:95:FB'temperature:name:\"Kleine Lilie Temperature\"moisture:name:\"Kleine Lilie Moisture\"illuminance:name:\"Kleine Lilie Illuminance\"conductivity:name:\"Kleine Lilie Soil Conductivity\"battery_level:name:\"Kleine Lilie Battery Level\"- platform:xiaomi_hhccjcy01mac_address:'C4:7C:8D:6B:94:7A'temperature:name:\"Peace Lily Temperature\"moisture:name:\"Peace Lily Moisture\"illuminance:name:\"Peace Lily Illuminance\"conductivity:name:\"Peace Lily Soil Conductivity\"battery_level:name:\"Peace Lily Battery Level\"- platform:xiaomi_hhccjcy01mac_address:'C4:7C:8D:6C:2F:FC'temperature:name:\"Alpenveilchen Temperature\"moisture:name:\"Alpenveilchen Moisture\"illuminance:name:\"Alpenveilchen Illuminance\"conductivity:name:\"Alpenveilchen Soil Conductivity\"battery_level:name:\"Alpenveilchen Battery Level\"  I combine the individual sensors into plant entities in Home Assistant so that they can be visualised with the appropriate Lovelace Card. A plant configuration looks like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  alpenveilchen:sensors:moisture:sensor.alpenveilchen_moisturetemperature:sensor.alpenveilchen_temperatureconductivity:sensor.alpenveilchen_soil_conductivitybrightness:sensor.alpenveilchen_illuminancemin_brightness:3500max_brightness:30000min_temperature:8max_temperature:35min_moisture:15max_moisture:60min_conductivity:350max_conductivity:2000  The values for min and max come from the database of khronimo.\nIn Lovelace it then looks like this with the lovelace-flower-card from HACS: Notification To make sure that I get something out of the whole thing and am reminded to water, I have set up an automation that sends me a notification on my mobile phone with the values of the humidity humidity sensors.\nThe automation is triggered when I come home.\n1 2 3 4 5  trigger:- platform:zoneentity_id:person.thomaszone:zone.homeevent:enter  I have entered as a condition that the automation should only be triggered three days a week. I have also created an input_boolean with which I can prevent the automation from being triggered more than once on the same day.\n1 2 3 4 5 6 7 8 9  condition:- condition:stateentity_id:input_boolean.pflanzenstatusstate:'off'- condition:timeweekday:- mon- wed- fri  The content of the notification is assembled via a template that runs through all plant entities and reads out the moisture attribute for each of them. In addition, the notification is is marked as persistent and sticky so that I cannot simply swipe it away on my mobile phone.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  action:- service:notify.mobile_app_nokia_9data:message:\u003e-{% for state in states.plant -%} {{ state.name }} {{state.attributes.moisture|int}}{{state.attributes.unit_of_measurement_dict.moisture}}\u003cbr\u003e {%- endfor %}title:Pflanzenstatusdata:persistent:truesticky:truetag:pflanzenstatus- service:input_boolean.turn_ontarget:entity_id:input_boolean.pflanzenstatus  At the end, the above-mentioned input_boolean is also set to prevent further executions on the same day. The resetting of the input_boolean is carried out in a further automation that runs every day at midnight.\nNFC Tag A notification with the sticky flag can only be cleared by triggering a message with the body clear_notification. The same tag must be used for the original notification and the clear message.\n1 2 3 4 5 6  action:- service:notify.mobile_app_nokia_9data:message:clear_notificationdata:tag:pflanzenstatus  This clear message is triggered by an NFC tag on my balcony door. Since this is the only way to get rid of the notification, I am forced to go near the plants.\nTranslated with www.DeepL.com/Translator (free version)\n","description":"","tags":["Smarthome","Home Assistant","ESPHome","ESP32"],"title":"Monitoring plants with Home Assistant","uri":"/en/posts/smarthome/pflanzenstatus/"},{"categories":["posts"],"content":"Anyone can use a normal bell With a classical doorbell, pressing the bell button closes an electric circuit and thereby activates a bell or similar. For the integration of such bells there are plenty of instructions and more or less ready-made solutions for the integration into smarthome systems.\nIn apartment buildings, however, there are often doorbell systems that are somewhat more complicated in design with intercom, door buzzer, light control, etc.\nTCS Doorbell Systems I have such a system from TCS installed in my building. Here, all apartment units are connected in parallel to a proprietary bus and react to directly addressed messages.\nUnderstanding the doorbell system The first step is to understand the electrical side. If you take the apartment unit of the bell from the wall, you will find only two wires. With the multimeter you measure 24V here, which will be reduced a bit when the bell is activated. From the few sources on the Internet about the TCS system, one learns that the 24V are pulled to 0V for one or two milliseconds to encode zeros and ones of a binary protocol. Aaron Christophel has a video in which he reverse-engineered the protocol with an oscilloscope.\nThe short version is that each connected device has a unique address and the different actions like ringing, door buzzer or switching on the light are sent as messages on the bus. The messages are either four or eight bytes long and are processed by a microcontroller in the apartment unit.\nListening to the bus Since the bus is a voltage signal, we can simply connect to the bus in parallel and listen to the messages. To be able to listen to the bus, the 24V must be reduced to 3.3V, which an ESP8266 can process. In this case, a simple voltage divider made up of 1MΩ and 147kΩ is sufficient. In my first version I had read the voltage level via the analog input and evaluated it directly in the loop(). The problem was that the jitter was too high, so the length of the pulses was not reliably detected. Because of this the ringing was often not recognized.\nIn the current version I read the voltage as digital input and use the code of Aaron, where the edge changes call an interrupt function to decode the messages.\nThe finished code can be found in my Github Repository as always.\nConnecting to Home Assistant MQTT Disovery The original idea was to implement the connection to Home Assistant via ESPHome. Unfortunately the interrupt does not work with this, so the solution is now a direct MQTT connection.\nThe configuration in Home Assistant is done by MQTT Discovery. For this a JSON payload is sent to the topic homeassistant/device_automation/klingel_sensor/config. It is important to set the retain flag, otherwise Home Assistant forgets the configuration on restart.\n1 2 3 4 5 6 7 8 9 10 11 12 13  { \"automation_type\": \"trigger\", \"payload\": \"0e22e280\", \"topic\": \"home/flur/klingel\", \"type\": \"button_short_press\", \"subtype\": \"button_1\", \"device\": { \"name\": \"Klingel Sensor\", \"identifiers\": \"esp8266-14c4ed\", \"manufacturer\": \"Syralist\", \"model\": \"tcs-interrupt\" } }   The payload in the JSON corresponds to the message read from the bus when the own bell is pressed. To find the matching message, simply connect to the MQTT broker and see what is sent on the configured topic when the bell is pressed.\nWith this configuration you have created a device in the Home Assistant without entities but with a MQTT Device Trigger, which can be used as a trigger for automations. Automations I have linked two automations with the bell. On the one hand I get a notification on my cell phone via the Home Assistant App. On the other hand I let a LED bar flash green, but only if my PC is switched on. This way I can see the ringing even when I use headphones.\n Translated with www.DeepL.com/Translator (free version)\n","description":"","tags":["Smarthome","HomeAssistant","ESPHome","MQTT"],"title":"Integration of my Doorbell in Home Assistant","uri":"/en/posts/smarthome/klingel/"},{"categories":["posts"],"content":"In this short article I show how to use a Zigbee button to control automations in Node-RED.\nThe Button and Home Assistant I am using the Aqara Wireless Mini Switch from Xiaomi. This is a Zigbee button that is integrated in my Home Assistant via deConz.\nSuch buttons are not added as entities in the Home Assistant like other devices. Instead, events are triggered when the button is pressed. These events can then be used as triggers for automations.\nUsage in Node-RED The Flow in Node-RED consists of three necessary nodes and four optional nodes. First, I use an events: all node to catch the events of type “deconz_event”.\nNext, a switch node is used to filter for the button’s Id in ‘msg.payload.event.id’. The id is derived from the name given in the Phoscon interface.\nThirdly, the type of event is filtered with another switch node. The Aqara button returns these four events:\n   Event Description     1002 single click   1004 double click   1001 hold   1003 release    Now you can connect your flows directly to the corresponding outputs of the second switch node. But since I can never remember which number stands for which click, I added delay nodes, which are configured to rate limit. This does not affect the flow, they are just to make programming easier for me.\nAnd here is the whole flow to import:\n{ \"id\": \"9b4d7173.f7538\", \"type\": \"server-events\", \"z\": \"e0fe8a5c.1c4ed8\", \"name\": \"DeconzEvent\", \"server\": \"db71ae1a.4969e\", \"event_type\": \"deconz_event\", \"x\": 110, \"y\": 140, \"wires\": [ [ \"92b4d903.eda7f8\" ] ] }, { \"id\": \"92b4d903.eda7f8\", \"type\": \"switch\", \"z\": \"e0fe8a5c.1c4ed8\", \"name\": \"ID auslesen\", \"property\": \"payload.event.id\", \"propertyType\": \"msg\", \"rules\": [ { \"t\": \"eq\", \"v\": \"smart_switch\", \"vt\": \"str\" } ], \"checkall\": \"true\", \"repair\": false, \"outputs\": 1, \"x\": 310, \"y\": 140, \"wires\": [ [ \"bf4a2cc8.ced0c\" ] ] }, { \"id\": \"bf4a2cc8.ced0c\", \"type\": \"switch\", \"z\": \"e0fe8a5c.1c4ed8\", \"name\": \"Event auslesen\", \"property\": \"payload.event.event\", \"propertyType\": \"msg\", \"rules\": [ { \"t\": \"eq\", \"v\": \"1002\", \"vt\": \"str\" }, { \"t\": \"eq\", \"v\": \"1004\", \"vt\": \"str\" }, { \"t\": \"eq\", \"v\": \"1001\", \"vt\": \"str\" }, { \"t\": \"eq\", \"v\": \"1003\", \"vt\": \"str\" } ], \"checkall\": \"true\", \"repair\": false, \"outputs\": 4, \"x\": 560, \"y\": 140, \"wires\": [ [ \"db107f64.bbcf6\" ], [ \"7b49a1f5.e5728\" ], [ \"2f180c9f.1abab4\" ], [ \"cc777d04.e73a4\" ] ] }, { \"id\": \"db107f64.bbcf6\", \"type\": \"delay\", \"z\": \"e0fe8a5c.1c4ed8\", \"name\": \"Klick\", \"pauseType\": \"rate\", \"timeout\": \"1\", \"timeoutUnits\": \"seconds\", \"rate\": \"1\", \"nbRateUnits\": \"1\", \"rateUnits\": \"second\", \"randomFirst\": \"1\", \"randomLast\": \"5\", \"randomUnits\": \"seconds\", \"drop\": false, \"x\": 790, \"y\": 120, \"wires\": [ [ \"5ee59413.880bac\", \"288d2bb8.d00f44\" ] ] }, { \"id\": \"7b49a1f5.e5728\", \"type\": \"delay\", \"z\": \"e0fe8a5c.1c4ed8\", \"name\": \"Doppel-Klick\", \"pauseType\": \"rate\", \"timeout\": \"1\", \"timeoutUnits\": \"seconds\", \"rate\": \"1\", \"nbRateUnits\": \"1\", \"rateUnits\": \"second\", \"randomFirst\": \"1\", \"randomLast\": \"5\", \"randomUnits\": \"seconds\", \"drop\": false, \"x\": 810, \"y\": 160, \"wires\": [ [ \"c0c2b9f1.29de48\", \"288d2bb8.d00f44\" ] ] }, { \"id\": \"2f180c9f.1abab4\", \"type\": \"delay\", \"z\": \"e0fe8a5c.1c4ed8\", \"name\": \"Halten\", \"pauseType\": \"rate\", \"timeout\": \"1\", \"timeoutUnits\": \"seconds\", \"rate\": \"1\", \"nbRateUnits\": \"1\", \"rateUnits\": \"second\", \"randomFirst\": \"1\", \"randomLast\": \"5\", \"randomUnits\": \"seconds\", \"drop\": false, \"x\": 790, \"y\": 200, \"wires\": [ [] ] }, { \"id\": \"cc777d04.e73a4\", \"type\": \"delay\", \"z\": \"e0fe8a5c.1c4ed8\", \"name\": \"Loslassen\", \"pauseType\": \"rate\", \"timeout\": \"1\", \"timeoutUnits\": \"seconds\", \"rate\": \"1\", \"nbRateUnits\": \"1\", \"rateUnits\": \"second\", \"randomFirst\": \"1\", \"randomLast\": \"5\", \"randomUnits\": \"seconds\", \"drop\": false, \"x\": 800, \"y\": 240, \"wires\": [ [] ] }, { \"id\": \"db71ae1a.4969e\", \"type\": \"server\", \"z\": \"\", \"name\": \"Home Assistant\", \"legacy\": false, \"addon\": true, \"rejectUnauthorizedCerts\": true, \"ha_boolean\": \"y|yes|true|on|home|open\", \"connectionDelay\": true, \"cacheJson\": true } ]    Translated with www.DeepL.com/Translator (free version)\n","description":"","tags":["Smarthome","Zigbee","Node-RED","Home Assistant","Xiaomi"],"title":"Zigbee Button in Node-RED","uri":"/en/posts/smarthome/zigbeebutton-nodered/"},{"categories":["posts"],"content":"Impressions after three weeks For three weeks now I have an Alfawise U50 at home. You can read the article about unboxing and assembly here.\nSo far I can say that the printer just works. I still print exclusively with Octoprint and that works fine, too. In this article I present which modifications or add-ons I have added so far and what I have learned about handling the printer.\nAttachments X-Axis Spacer The first modification I printed is a spacer for the X-axis endstop. When delivered, the nozzle is outside the print bed when the endstop is pressed. So I designed an adapter in OpenSCAD that can be plugged onto the existing metal tag and stops the nozzle 4mm further inside. Camera Holder The next attachment is a camera holder for a Logitech C270 webcam (Thingiverse). I mounted the camera on top of the crossbar, so that I have the complete printing bed in the picture. Tool Holder The tool holder (Thingiverse) is actually intended for the Ender 3, but works just as well for the U50. The finished part is simply put on the side of the upper crossbar. Z-Axis Stabilizer and Filament Guide The threaded rod of the Z-axis has no support or guide at the upper end when delivered. I haven’t had any problems with it, because I haven’t printed very high yet, but I found this bracket on Thingiverse. Now the threaded rod is held with a ball bearing at the top. The filament guide consists of two parts. At the top I have chosen this arm (Thingiverse), which you can see on the last picture. For this I had to shorten one leg with the pliers, because it got in the way with the Z-axis mount.\nAt the bottom I added a guide which was constructed directly for the U50 and holds a ball bearing (Thingiverse). Raspberry Case As mentioned before, I print exclusively via Octoprint, which runs on a Raspberry Pi 3. So I printed a case that can be mounted in the frame below the printing bed (Thingiverse). Holder for USB-Hub In the beginning I had the webcam and printer connected directly to the Raspberry Pi. But this caused the power supply to drop out from time to time, especially during startup when the printer electronics are not yet supplied by its own power supply. Therefore I now use a USB hub with its own power supply, which is mounted between the printer electronics and the printing bed. I designed the mounting bracket for it myself in OpenSCAD.\nCablemanagement To avoid the many additional cables flying around wildly and getting tangled up with the moving parts of the printer I printed out a handful of cable guides for aluminium profiles (Thingiverse). For the power supply everything is plugged into a triple socket. The three cables for the printer, the Raspberry Pi and the USB hub are bundled together with a spiral hose. The printer plug is also plugged into an Osram Smart socket so that I can disconnect the printer from the mains if necessary. For the connection to my Smarthome there will be a separate article. Insights in printing The first important thing to know is to check the leveling before each print. The printed parts stick extremely tight to the supplied printing bed, so that I sometimes have to use some force to remove them. This often changes the leveling.\nThe second insight is to always level with a warm printing bed. Otherwise the temperature will change the leveling again.\n Translated with www.DeepL.com/Translator (free version)\n","description":"","tags":["3D Printing","Prototyping","Raspberry Pi","Octoprint"],"title":"Alfawise U50 – Modifications and Second Impression","uri":"/en/posts/3d-druck/alfawise-u50-zweitereindruck/"},{"categories":["posts"],"content":"My first 3D Printer I learned about 3D printing a few years ago at the Hackerspace . Now I finally decided to buy my own printer. After a video from SchimmerMedia I decided to buy the Alfawise U50 for less than 200€ from Gearbest.\nThe Unboxing The Packaging The printer arrives from China well protected in foam packaging.\nUnderneath the foam is the already assembled bottom part of the printer and a box with screws and tools.\nYou need five(!) different hexagon socket wrenches for assembly. Fortunately all sizes are included. In addition there is a scraper and a side cutter to remove the printed parts from the bed later and to trim them, as well as a Micro-SD card with USB adapter. On the card you find an old version of Cura including a configuration file, the assembly instructions in digital form and some example 3D models.\nIn the lower foam half you will find the remaining attachments, which are also already partly assembled.\nThese parts must now be assembled according to the instructions.\nThe Assembly The text of the manual is translated into reasonably understandable English, but the pictures are sometimes a bit small.\nThe first part to be assembled is the combination of X-axis drive and extruder drive. The construct has to be screwed to the X-axis strut and the screw has to be fiddled into the hole from behind.\nThe hotend is then simply fitted onto the rail and the second Z-axis guide is screwed on the other side.\nThe toothed belt that moves the hot end is fixed with printed clips. We will see how long they last.\nThe vertical aluminium profiles are fixed from below with one screw each. The right side is additionally fixed with a T-profile.\nThe left side is more fiddly again, because here you have to mount the attachment with the Z-axis drive.\nThe Y-axis drive is now mounted at the rear. Of course you need two different types of screws and the matching hexagon socket wrenches.\nThe belt for the Y-axis is fixed under the printing bed with cable ties. But I had to loosen one side of it to connect the belt to the drive. When fixing it again one of the printed clamps broke.\nAnd this is what it looks like before the wiring.\nThe Wiring All components are wired with plug-in connectors. Due to the different size, servo connection and limit switch connection cannot be confused. Due to the shape of the plug, reverse polarity is also basically impossible.\nThe individual cables are well labelled and combined in cable sleeves.\nThe connection for the hot end is secured by a screw connection.\nThe connection for the Y limit switch is the only one that requires some fiddling to connect.\nThis is how the assembly looks like with the wiring finished. The wires from the hotend are located very unfavorably and grind as you can see on the printing bed. Meanwhile I have fixed them with cable ties to the top.\nSwitching on for the first time After everything was wired, I could switch on for the first time and since no MagicSmoke™ has escaped anywhere, I obviously put everything together correctly. Here you can already see the glued on printing bed.\nThe menu offers functions for manual control of all axes, temperature preselection and direct printing from the SD card. The pre-installed firmware with version 195 had the problem that the speed of the axes could not be adjusted because the input field did not work. In a French 3D printing forum I found a firmware update to version 217, which fixes the problem. Unfortunately the rar archive could not be unpacked under Linux, but only under Windows.\nThe extruder can only be moved via the menu when the hot end is heated up. I have not tested whether this is also blocked with external control. Before the extruder drive, the filament is threaded through a chamber with a limit switch, which detects when the filament has run out. After the extruder drive, the filament runs through a tube to the hot end. Here I had to cut a cable tie, because otherwise the filament could not be threaded to the end.\nWhen moving to the home position to adjust the printing bed, I noticed that the X limit switch is positioned too far outwards, so that the hotend is no longer above the printing bed. Unfortunately the limit switch can not be adjusted, so I glued a temporary spacer to the switch lug. In the meantime I have printed a suitable adapter for it. There will be a separate article on this later.\nMy first Impression After I ordered the printer, I came across two blog posts at China-Gadets and Drucktipps3D that tore the U50 up quite a bit. Of course I don’t have that much experience with other printers but I’m quite satisfied with the construction and quality so far.\nGearbest advertises that you can assemble the printer in 20 minutes, I absolutely cannot confirm that. I took my time and took the photos in between, so it took me about two hours from opening the box to turning on the printer. As already written above, it is a little fiddly in some places, but in general, the printer can be easily assembled.\nI started the first print from my Linux laptop directly from Cura. I am using the latest version of Cura, took the default setting of the Alfawise U20 and only adjusted the size of the printing bed.\nMeanwhile I have connected the printer to a Raspberry Pi with Octoprint and print from there. I haven’t made any big prints of several hours and I’m still at the provided filament sample, but so far I haven’t regretted the purchase.\n","description":"","tags":["3D Printing","Prototyping","Raspberry Pi","Octoprint"],"title":"Alfawise U50 – Unboxing and First Impression","uri":"/en/posts/3d-druck/alfawise-u50-unboxing/"},{"categories":["posts"],"content":"Window Controls Radiator As I wrote in my article about my Smarthome setup, automation is what makes a smart home smart. Here I describe how I turn the radiator down when the window is opened and turn it back up again when the window is closed.\nUpdate 2021-01-13: In the meantime, I no longer run the automation via Node-Red, but instead use the automations natively built into Home Assistant.\nInvolved Components The window is monitored with a Xiaomi Aqara door/window contact. This sends the status via Zigbee to the Conbee Stick. The Conbee is integrated into Home Assistant via Deconz.\nA Homematic radiator thermostat is mounted on the radiator. As Homematic central I have a Raspberry Pi with Raspberrymatic running. The thermostats are always set to manual, because they are controlled exclusively via Home Assistant.\nThe reduced temperature is set via an input_number entity.\nAutomation in Home Assistant I have created an automation for each window. The automation runs in Restart mode because I use a Wait action and any instances of the automation that are still running will be cancelled as a result.\nThe trigger is quite simple: When the window contact changes state to on, the window is open and the automation should start.\nI have added a condition here that my heating system must be running. When the heating is switched off in summer, the automation should not mess with the radiator.\nNow follow the actions that are to be carried out. First, a temporary scene is created in which the state of the thermostat is saved. For this, the service scene.create is called and a scene_id and the entities are passed.\nNext, the service climate.set_temperature is called. The temperature is not entered as a fixed value, but is read from the input_number helper with the help of a template.\nNext, a Wait for trigger action is started, which pauses the automation until the window contact reports closed again. No timeout is entered, so that the automation theoretically remains active forever.\nWhen the window is closed again, the last action is to activate the previously saved scene.\nHere is the complete YAML for import:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  alias:Fenster Bürodescription:''trigger:- platform:stateentity_id:binary_sensor.fenster_bueroto:'on'condition:- condition:stateentity_id:binary_sensor.vicare_heizkreisaktivstate:'on'action:- service:scene.createdata:scene_id:buero_snapshotsnapshot_entities:- climate.00201a49a039a4- service:climate.set_temperaturedata:temperature:'{{ states(''input_number.temperatur_niedrig'') }}'entity_id:climate.00201a49a039a4- wait_for_trigger:- platform:stateentity_id:binary_sensor.fenster_bueroto:'off'- scene:scene.buero_snapshotmode:restart  NodeRed (no longer used) The automation is implemented in NodeRed and consists of six nodes.\nThe state node “Fenster” reacts to a change of state of the window contact.\nThe switch node branches into the upper or lower path, depending on the state. The binary sensor of the window contact has the state on when the window is open and off when the window is closed.\nWhen the window has been opened, the first thing to do is to save the current status of the thermostat in a temporary scene with the call service node. In the data field, the name of the scene and a list of the entities to be saved must be passed.\n1 2 3 4 5 6  { \"scene_id\": \"thomas_snapshot\", \"snapshot_entities\": [ \"climate.0012999395e750\" ] }   Next, the value of the input_number entity is read with a current state node.\nFinally, the thermostat is set to the readout value with a call service node. For this purpose {{payload}} is used as a template in the data field.\n1 2 3  { \"temperature\": {{payload}} }   When the window is closed, the previously saved scene is activated with another call service node. Here only the name of the scene must be passed in the Data field.\n1 2 3  { \"entity_id\": \"scene.thomas_snapshot\" }   Such a flow is used for every room in which a smart thermostat is installed. The advantage of this method with a temporary scene is that it can be expanded easily. If additional entities are to be considered, they only need to be added at one point.\nHere is the complete flow to import:\n{ \"id\": \"d302a18c.b4a5c\", \"type\": \"api-call-service\", \"z\": \"e0fe8a5c.1c4ed8\", \"name\": \"Temperatur speichern\", \"server\": \"db71ae1a.4969e\", \"version\": 1, \"debugenabled\": false, \"service_domain\": \"scene\", \"service\": \"create\", \"entityId\": \"\", \"data\": \"{\\\"scene_id\\\":\\\"thomas_snapshot\\\",\\\"snapshot_entities\\\":[\\\"climate.0012999395e750\\\"]}\", \"dataType\": \"json\", \"mergecontext\": \"\", \"output_location\": \"\", \"output_location_type\": \"none\", \"mustacheAltTags\": false, \"x\": 620, \"y\": 1040, \"wires\": [ [ \"2ba89685.0924aa\" ] ] }, { \"id\": \"68ffd494.662f3c\", \"type\": \"server-state-changed\", \"z\": \"e0fe8a5c.1c4ed8\", \"name\": \"Fenster\", \"server\": \"db71ae1a.4969e\", \"version\": 1, \"exposeToHomeAssistant\": false, \"haConfig\": [ { \"property\": \"name\", \"value\": \"\" }, { \"property\": \"icon\", \"value\": \"\" } ], \"entityidfilter\": \"binary_sensor.tur_thomas\", \"entityidfiltertype\": \"exact\", \"outputinitially\": false, \"state_type\": \"str\", \"haltifstate\": \"\", \"halt_if_type\": \"str\", \"halt_if_compare\": \"is\", \"outputs\": 1, \"output_only_on_state_change\": true, \"x\": 100, \"y\": 1060, \"wires\": [ [ \"8c0ea6fb.5a5d08\" ] ] }, { \"id\": \"8c0ea6fb.5a5d08\", \"type\": \"switch\", \"z\": \"e0fe8a5c.1c4ed8\", \"name\": \"\", \"property\": \"payload\", \"propertyType\": \"msg\", \"rules\": [ { \"t\": \"eq\", \"v\": \"on\", \"vt\": \"str\" }, { \"t\": \"eq\", \"v\": \"off\", \"vt\": \"str\" } ], \"checkall\": \"true\", \"repair\": false, \"outputs\": 2, \"x\": 310, \"y\": 1060, \"wires\": [ [ \"d302a18c.b4a5c\" ], [ \"e5f92e8f.b86af\" ] ] }, { \"id\": \"4acbf5b0.7c7bbc\", \"type\": \"api-call-service\", \"z\": \"e0fe8a5c.1c4ed8\", \"name\": \"Temperatur setzen\", \"server\": \"db71ae1a.4969e\", \"version\": 1, \"debugenabled\": false, \"service_domain\": \"climate\", \"service\": \"set_temperature\", \"entityId\": \"climate.0012999395e750\", \"data\": \"{\\\"temperature\\\": {{payload}}}\", \"dataType\": \"json\", \"mergecontext\": \"\", \"output_location\": \"\", \"output_location_type\": \"none\", \"mustacheAltTags\": false, \"x\": 1050, \"y\": 1040, \"wires\": [ [] ] }, { \"id\": \"e5f92e8f.b86af\", \"type\": \"api-call-service\", \"z\": \"e0fe8a5c.1c4ed8\", \"name\": \"Temperatur zurücksetzen\", \"server\": \"db71ae1a.4969e\", \"version\": 1, \"debugenabled\": false, \"service_domain\": \"scene\", \"service\": \"turn_on\", \"entityId\": \"scene.thomas_snapshot\", \"data\": \"{\\\"entity_id\\\":\\\"scene.thomas_snapshot\\\"}\", \"dataType\": \"json\", \"mergecontext\": \"\", \"output_location\": \"\", \"output_location_type\": \"none\", \"mustacheAltTags\": false, \"x\": 630, \"y\": 1100, \"wires\": [ [] ] }, { \"id\": \"2ba89685.0924aa\", \"type\": \"api-current-state\", \"z\": \"e0fe8a5c.1c4ed8\", \"name\": \"temp_low\", \"server\": \"db71ae1a.4969e\", \"version\": 1, \"outputs\": 1, \"halt_if\": \"\", \"halt_if_type\": \"str\", \"halt_if_compare\": \"is\", \"override_topic\": false, \"entity_id\": \"input_number.temperatur_niedrig\", \"state_type\": \"num\", \"state_location\": \"payload\", \"override_payload\": \"msg\", \"entity_location\": \"data\", \"override_data\": \"msg\", \"blockInputOverrides\": false, \"x\": 840, \"y\": 1040, \"wires\": [ [ \"4acbf5b0.7c7bbc\" ] ] }, { \"id\": \"db71ae1a.4969e\", \"type\": \"server\", \"z\": \"\", \"name\": \"Home Assistant\", \"legacy\": false, \"addon\": true, \"rejectUnauthorizedCerts\": true, \"ha_boolean\": \"y|yes|true|on|home|open\", \"connectionDelay\": true, \"cacheJson\": true } ]   ","description":"","tags":["Smarthome","Node-RED","Home Assistant","Zigbee","Xiaomi","Homematic"],"title":"Window Automation","uri":"/en/posts/smarthome/fensterautomation/"},{"categories":["posts"],"content":"In this article I show how to import a list of appointments, process them and then save them in ICS format.\nBackground Bremer Stadtreinigung offers the waste collection dates for download as ICS file and as CSV file. Unfortunately there are two separate dates for residual waste and organic waste although both are collected on the same day.\nSince I also integrate the dates into my Smarthome to receive notifications about them, I also want them to be in a certain format in the calendar. Details about the integration will follow in a later article.\nThe Python script The finished script can be found here on Github. You need at least Python 3.6 because I use f-strings.\nImports First the required modules are imported. ics and arrow can be installed via pip, the other modules are included in the standard library.\n1 2 3 4 5  import csv from ics import Calendar, Event import arrow from dateutil import tz import datetime    csv : Read and write CSV files ics : Read and write ICS files arrow : extended functions for time objects dateutil.tz : Time zone definitions datetime : Standard functions for time objects  Configuration To make my script also interesting for others, I tried to program different possibilities to create the dates and make them configurable.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  ###### Einstellungen ###### # CSV-Datei von der Eno csv_file = r\"Abfuhrtermine für Auf dem Kamp.csv\" # Soll die Art der Abfuhr in den Titel eingetragen werden? True/False descriptive_title = True # Soll für die HomeAssistant Integration ein Offset eingetragen werden? 0..23 offset_hours = 6 # Soll ein ganztägiger Termin erzeugt werden? True/False all_day = True # Workaround für fehlerhafte All Day Events in ics.py aktivieren? True/False ics_workaround = True # Soll der Termin am Tag vor der Abfuhr erzeugt werden? True/False on_day_before = False # Zu welcher Stunde der Termin erzeugt werden, wenn er nicht ganztägig ist? 0..23 event_hour = 18 # Wie lange soll der Termin sein, wenn er nicht ganztägig ist? 0..23 duration_hour = 1 ######   It can be set whether the appointment is to be created for a whole day or for a specific hour with a configurable duration. You can create the appointment on the day before the collection or on the correct day. You can have the type of collection written in the title or just “Müllabfuhr”. For the integration in Home Assistant you can enter an offset.\nHelper Variables Before we start reading the CSV file, I create some helper variables.\n1 2 3 4 5 6  # Hilfsvariablen offset_string = f\" !!-{offset_hours:02d}:00\" # globale Variablen vorbelegen d = {} c = Calendar()   The offset_string is required for the Home Assistant integration already mentioned. I use an f-string here to insert the content of the variable into the string. The expression offset_hours:02d ensures that one-digit numbers are inserted with leading zero.\nFor the following code I additionally need an empty Dictionary d and an empty Calendar object c.\nImport CSV file The entries in the CSV file look like this:\n1 2 3 4  \"Wochentag\";\"Datum\";\"Abfuhrart\" \"Samstag\";\"04.01.2020\";\"Papier / Gelber Sack\" \"Mittwoch\";\"08.01.2020\";\"Bioabfall\" \"Mittwoch\";\"08.01.2020\";\"Restmüll\"   The CSV file is read in line by line and the entries are pre-processed.\n1 2 3 4 5 6 7 8 9 10 11 12 13  ## Datei öffnen with open(csv_file) as f: # CSV parsen csv_reader = csv.reader(f, delimiter=';', quotechar='\"') for row in csv_reader: if row[0] == 'Wochentag': # Überschrift überspringen continue # Mehrere Abfuhren an einem Tag zusammenfassen if row[1] in d: d[row[1]] =f\"{d[row[1]]} / {row[2]}\" else: d[row[1]] = row[2]   The csv.reader requires the separator and the quote-character to read the file correctly.\nIn the for loop, the heading is skipped first. Next, if-row[1] in d is used to check whether the date is already entered in my dictionary. If this is the case, the two collection types are combined via an f-string and the entry in the dictionary is updated. Otherwise, a new entry is added to the dictionary.\nNow I have a dictionary with the date string as key and the collection type as value.\nCreate Events The next step is to iterate over the dictionary and fill the Calendar object created above with events. d.items() returns Key and Value as a tuple.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  # Zusammengefasste Termine ins ICS Format umandeln for datum, abfuhr in d.items(): # Event anlegen e = Event() # Titel zusammenbauen e.name = f\"Müllabfuhr{(' ' + abfuhr) if descriptive_title else ''}{offset_string if offset_hours \u003e 0 else ''}\" # Startzeitpunkt zusammenbauen _date = datetime.datetime.strptime(datum, \"%d.%m.%Y\").replace(hour=event_hour, tzinfo=tz.gettz(\"Europe/Berlin\")) begin = arrow.get(_date) if ics_workaround: begin = begin.shift(days = 1) e.begin = begin.shift(days = -1 if on_day_before else 0) # Dauer eintragen bzw. ganztägigen Termin erzeugen e.duration = {\"hours\": duration_hour} if all_day: e.make_all_day() # Art der Abfuhr eintragen e.description = abfuhr # Event eintragen c.events.add(e)   For the title of the event I use an f-string again to put several strings together. The expression (' ' + abfuhr) if descriptive_title else '' is a so-called ternary operator. If descriptive_title is set to True, the part before the if is used, otherwise the part after the else will be used.\nThe start time is first read from the key as datetime object with strptime. At the same time, the hour is set to the value defined above with replace and the time zone is set. The datetime object is then converted to arrow object because this is expected by the ICS module.\nThe ICS module has a bug in the used version, which causes the time zone to be ignored for all-day appointments, so that the appointment appears one day too early. As a workaround I therefore move the appointment one day forward with shift so that it is created by ICS on the right day. If it is configured above that the appointment is to be created on the day before the collection, the same command is used to move the appointment back again.\nNow the duration set above is entered into the appointment and then, if necessary, the appointment is converted into an all-day appointment.\nFinally, the collection type is entered in the event description and the event is added to the calendar object.\nWriting the ICS file The last step is to write the Calendar object to a file.\n1 2 3  # Kalenderdatei schreiben with open(\"abfuhr.ics\", \"w\") as f: f.writelines(c)   The resulting file can now be imported into Google, for example.\n","description":"","tags":["Python","Home Assistant","Datatransformation","ICS"],"title":"Processing Events with Python","uri":"/en/posts/programmieren/termine_aufbereiten/"},{"categories":["posts"],"content":"This blog is created with Hugo. In this post I tell you what it’s all about and why I chose this method.\nWhat is Hugo? Hugo claims to be the world’s fastest framework for creating static websites. Hugo is programmed in Go and available for all common operating systems.\nThe articles are written in Markdown and then “compiled” to create the HTML pages. The appearance is determined via Themes.\nThis makes the workflow comparable to that of $\\LaTeX$.\nWhy Hugo? With most content management systems like Wordpress, Drupal, Typo3, etc. it always bothered me that you have to set up a more or less powerful backend. You always need PHP or Python and a database, even if you just want to write a simple blog.\nOn the Self Hosted Podcast I then heard about Hugo.\nHow to get started? Preparations There are various installation methods for Hugo. I downloaded the program as a ZIP file on my Windows computer, on Linux I installed it with Snap. Details can be found on the Hugo website.\nIt’s not mandatory, but using Git makes it a little easier. Therefore, in this article I assume that you have installed Git and have a Github account.\nCreate Site The basic structure of the page is created with the following command on the console:\nhugo new site meinblog Hugo creates a subdirectory with the name meinblog and this content:\narchetypes/ config.toml content/ data/ layouts/ static/ themes/ Next you should choose a theme from the Hugo Theme List. I tried some and finally decided on the MemE theme. The easiest way to install is with Git as described in README. You have to adapt the config.toml to your own needs. Another article on this topic follows.\nCreate Article Articles are created in the content directory as .md files. You can optionally create subfolders as categories. You can create the file manually or use this Hugo command:\nhugo new posts/my-first-post.md The advantage over manual creation is that a frontmatter is also created. This is the configuration area of the article where appearance and behavior can be customized. Another article on this topic follows.\nAt this stage you can start the integrated server and display the (empty) page:\nhugo server -D The option -D at this point is important so that articles marked as draft are also created and displayed.\nNow you can write your articles. If the server is running in the background, the page is automatically regenerated and updated in the browser as soon as you change and save a file.\nPublish the Site When you are finished with your articles, you call hugo without any other options. This creates the finished website with all necessary files in the public subdirectory. This directory can now be hosted on any web server. The workflow for hosting as a github.io page is shown on the Hugo website.\n","description":"","tags":["Hugo","Website"],"title":"Building a Website with Hugo – Basics","uri":"/en/posts/allgemein/website-mit-hugo/"},{"categories":["posts"],"content":"In this post I show the steps to recreate my environmental sensor with a button. The sensor measures temperature, humidity and air pressure and has a button to trigger any action.\nPreparation What ist ESPHome? According to the self-description on esphome.io, ESPHome is a system for programming ESP8266 or ESP32 microcontrollers using simple configuration files.\nESPHome is written in python and can be installed without Home Assistant using pip install esphome or with docker pull esphome/esphome. I use ESPHome as a home assistant addon, because you also get a web interface for administration.\nNeeded Hardware  ESP8266 microcontroller - e.g. Wemos D1 mini BME280 sensor - with I²C breakout board push button  The housing is lasered from 3mm MDF. A generator for such housings is for example boxes.py.\nConnect Sensor and Button The BME280 is connected via I²C, for this we need the following pins:\n 5V → VIN G → GND D4 → SDA D5 → SCL  You can freely choose the pin for the button, but there are some pins that trigger special functions when booting. I used pin D3 here, the second pin of the button is connected to GND.\nI built the whole thing with plinths on a breadboard in order to be able to easily disassemble the components.\nESPHome Project in Home Assistant Create Project Click on the friendly red button with the plus on the web interface to open the wizard for new projects.\nFirst you give a name.\nThe second step is the selection of the microcontroller. I use the Wemos D1 mini for most projects.\nThe last step is the specification of the WiFi data and the password for the over-the-air update. I use the !secret notation known from Home Assistant. Details on this below.\nThe wizard is now complete and shows us the next steps to program the microcontroller.\nAfter closing the wizard with Submit, the interface selection in the upper corner is pointed out.\nFileorganisation and !secrets In Home Assistant, the project files are in the directory /config/esphome. The example given has created the umweltsensor.yaml.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  esphome:name:umweltsensorplatform:ESP8266board:d1_miniwifi:ssid:\"!secret wifi-ssid\"password:\"!secret wifi-password\"# Enable fallback hotspot (captive portal) in case wifi connection failsap:ssid:\"Umweltsensor Fallback Hotspot\"password:\"lg2kCzecpat7\"captive_portal:# Enable logginglogger:# Enable Home Assistant APIapi:password:\"!secret esphome-password\"ota:password:\"!secret esphome-password\"  I created a secrets.yaml in the same directory. The entries in it can be imported into other .yaml files with!secret. This has the advantage that you can share the project file with others, like me here, without having to pass on your credentials.\nFlashing for the First Time For the first flashing, the microcontroller must be connected via USB to the computer on which ESPHome is running. In my case, the Raspberry Pi where Home Assistant is installed.\nMost of the time, the port of the microcontroller is not displayed immediately when the USB cable is connected. This is related to the Docker system based on the Home Assistant. The workaround is to restart the addon after the microcontroller is connected.\nIf nothing else is connected, /dev/ttyUSB0 is probably displayed, in my case the microcontroller is at /dev/ttyUSB1.\nIn order for the access data to be imported correctly, we still have to edit the generated .yaml file and remove the quotation marks from all entries with !secret. To do this, click on EDIT under the corresponding entry.\nFinally you click UPLOAD to start the flashing.\nIf everything worked correctly, the Arduino code should now be generated from the .yaml file. All the necessary libraries are downloaded in the background, the code compiled and the upload started.\nIn the following logging output you can check whether you have entered the WiFi data correctly.\nFrom now on you can disconnect the microcontroller from the Raspberry Pi and program it via WiFi. To do this, switch the interface above to over-the-air.\nConfigure Sensor and Button For the sensor to be addressed the I²C component is loaded first. The scan: True option ensures that the bus is scanned for devices on every boot.\n1 2 3 4  i2c:sda:4scl:5scan:True  Since the BME280 measures three parameters, the three options temperature, pressure and humidity must be configured accordingly.\nIn filters: for the temperature sensor, a static offset of -7 degrees is set that I have determined in comparison with a second sensor. Likewise, a static offset of +10 percent is set for the air humidity.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  sensor:- platform:bme280temperature:name:\"Thomas Zimmer Temperatur\"oversampling:16xfilters:- offset:-7.0pressure:name:\"Thomas Zimmer Luftdruck\"humidity:name:\"Thomas Zimmer Feuchtigkeit\"filters:- offset:+10.0address:0x76update_interval:60s  The button is configured as a binary sensor. Since the button is connected to GND, the internal pull-up resistor must be activated and the state inverted with inverted: True. The sensor therefore delivers on when the button is pressed.\n1 2 3 4 5 6 7 8 9  binary_sensor:- platform:gpiopin:number:D3mode:INPUT_PULLUPinverted:Truename:\"Thomas Zimmer Button\"filters:- delayed_on:10ms  Connecting to Home Assistant After the complete program has been loaded onto the microcontroller, the sensors must still be integrated in Home Assistant. The setup is done via the integration page in the Home Assistant settings.\nEnter the name of the project as the host address, in this case umweltsensor.local.\nAfter the API password query, the entities for the configured sensors are automatically added to Home Assitant.\n","description":"","tags":["Smarthome","Home Assistant","ESPHome","ESP8266"],"title":"Environment Sensor with ESPHome in Home Assistant","uri":"/en/posts/smarthome/esphome-sensor/"},{"categories":["posts"],"content":"In this post I want to give a brief overview of my Smarthome Setup. In later posts I will go into more detail.\nCentral Hub As my Smarthome Hub I’m running Home Assistant on a Raspberry Pi 3B+. I’m using the native Version with HassOS and the system boots directly from an SSD drive. There is a Conbee stick attached via USB for Zigbee connectivity. Additionally I run another Rasberry Pi 1 with RaspberryMatic to connect my Homematic components.\nMy router is a FritzBox 7590 supported by a FritzRepeater 1750E for connecting WiFi components.\nBoth the Fritzbox and the main Raspberry are buffered by an uninterruptible power supply, because the fuse regularly blows in my flat when I switch on my power strip.\nHardwarelist  Raspberry Pi 3B+ with 2.4A power supply. Intenso Portable SSD with 128GB. Additional power supply with 2.4A and USB Y-cable. Conbee Stick by Dresden Elektronik Uninterruptible power supply APC BX700U-GR Raspberry Pi 1 with HM-MOD-RPI-PCB by ELV  Software When I moved to the SSD drive I decided against setting up for example Rasbian, but used the native installation. That way there is no extra operating system to maintain, but everything can be managed from the Home Assistant interface. Parallel to Home Assistant there are of course a bunch of Addons on the Raspberry:\n ADB Bridge for Android TV control APC USB Daemon for reading the UPS Duck DNS for secure remote access via internet ESPhome for DIY components File Editor to edit the configuration from within the browser Hass.io Google Drive Backup for automated back up MariaDB as replacement for the SQLite history database Mosquitto broker for MQTT Node-RED for automations Samba-Share for access from other computers TasmoAdmin for managing the Tasmota devices Terminal \u0026 SSH for low level access to the system chrony as local NTP server deCONZ for managing the Zigbee components  Of course HACS (Home Assistant Community Store) is also installed for custom components, lovelace plugins, and themes.\nComponents The advantage of Home Assistant is that components from a wide variety of manufacturers and with a wide variety of technologies can be integrated. Accordingly, various sensors and actuators are distributed in the apartment.\nSensors Temperature, humidity and air pressure are recorded in almost every room. On the one hand, the Aqara WSDCGQ11LM multi-sensors via Zigbee are used, on the other hand, I have connected ESP8266 with BME280 sensors via ESPhome.\nWindows and doors are monitored with Aqara and Homematic door / window contacts. An IKEA Tradfri via Zigbee serves as the motion detector.\nIn the basement, a Sonoff POW monitors the power consumption of the washing machine.\nLight The ceiling lighting is not yet smart in my apartment, but it usually stays off anyway because the light comes from decorative lights or indirect lighting.\nThe decorative lights almost all have a classic light source and are plugged into smart intermediate sockets. Most of them are from Teckin or Sonoff and flashed to Tasmota. Another comes from Osram and is connected via Zigbee.\nThere are also some directly connected lamps. A bulb from Eufy connected via their cloud service, an LED strip from Osram via Zigbee and two self-made LED lights connected via ESPhome.\nHeating Our Viessmann heating system is connected via the cloud; Homematic thermostats are mounted on the radiators.\nShutters For the control of the electric roller shutters, I installed Shelly 2.5 flush-mounted actuators and connected them locally via MQTT.\nInteraction Most components can be controlled via Alexa voice input, all components can be controlled via the web interface or companion app on the mobile phone. There are also physical buttons for some actions. In addition to the Aqara WXKG11LM Zigbee button, a self-made button via ESPhome is also used here.\nAutomation The automations are of course what makes the smart home smart. Here is just a brief overview:\nIn the living room, the light is switched on and off depending on the television. The radiators are linked to the windows and also regulate up or down according to the time of day.\nWhen I go to bed, the computer and the NAS are shut down, the roller shutters are closed and the radiator is turned down.\nThere are notifications when the washing machine is ready, when the doorbell rings and when the garbage has to be put out.\n That should suffice as a brief overview of my setup. As written above, soon followed by other articles with details on specific topics.\n","description":"","tags":["Smarthome","Home Assistant","Zigbee","Homematic","Raspberry Pi"],"title":"My Smarthome Setup","uri":"/en/posts/smarthome/mein_setup/"},{"categories":["about"],"content":"Legal Disclosure Information in accordance with Section 5 TMG Thomas Helmke\nAuf dem Kamp 31\n28217 Bremen\nContact Information Telephone: 04213802659\nE-Mail: thomas.helmke@gmx.de\nResponsible according to Section 55 Abs. 2 RStV Thomas Helmke\nAuf dem Kamp 31\n28217 Bremen\nAccountability for content The contents of our pages have been created with the utmost care. However, we cannot guarantee the contents' accuracy, completeness or topicality. According to statutory provisions, we are furthermore responsible for our own content on these web pages. In this matter, please note that we are not obliged to monitor the transmitted or saved information of third parties, or investigate circumstances pointing to illegal activity. Our obligations to remove or block the use of information under generally applicable laws remain unaffected by this as per §§ 8 to 10 of the Telemedia Act (TMG).\nAccountability for links Responsibility for the content of external links (to web pages of third parties) lies solely with the operators of the linked pages. No violations were evident to us at the time of linking. Should any legal infringement become known to us, we will remove the respective link immediately.\nCopyright Our web pages and their contents are subject to German copyright law. Unless expressly permitted by law, every form of utilizing, reproducing or processing works subject to copyright protection on our web pages requires the prior consent of the respective owner of the rights. Individual reproductions of a work are only allowed for private use. The materials from these pages are copyrighted and any unauthorized use may violate copyright laws.\nThanks to: translate-24h.de English Translations\n","description":"","tags":null,"title":"Legal Disclosure","uri":"/en/about/"}]
